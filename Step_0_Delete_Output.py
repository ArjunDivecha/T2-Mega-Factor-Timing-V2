"""
# Step_0_Delete_Output.py
#
# This script deletes all output files generated by the factor timing pipeline.
# Run this script to clean up before re-running the pipeline.
"""

import os
import glob
import time

def delete_file(file_path):
    """Delete a file if it exists and print status"""
    if os.path.exists(file_path):
        try:
            os.remove(file_path)
            return True
        except Exception as e:
            print(f"Error deleting {file_path}: {e}")
            return False
    return False

def main():
    """Delete all output files from the factor timing pipeline"""
    print("=== DELETING OUTPUT FILES ===")
    start_time = time.time()
    
    # List of specific files to delete
    specific_files = [
        "prepared_data.pkl",
        "rolling_windows.pkl",
        "shrinkage_results.pkl",
        "top5_equal_weight_results.pkl",
        "test_results.pkl",
        "unrotated_optimal_weights.xlsx",
        "rotated_optimal_weights.xlsx",
        "factor_timing_results.xlsx"
    ]
    
    # Delete specific files
    deleted_count = 0
    for file_path in specific_files:
        if delete_file(file_path):
            print(f"Deleted: {file_path}")
            deleted_count += 1
    
    # Delete PDF plot files
    pdf_files = glob.glob("*.pdf")
    for pdf_file in pdf_files:
        if delete_file(pdf_file):
            print(f"Deleted: {pdf_file}")
            deleted_count += 1
    
    # Delete files in conditioning_var_analysis directory
    conditioning_dir = "conditioning_var_analysis"
    if os.path.exists(conditioning_dir) and os.path.isdir(conditioning_dir):
        conditioning_files = glob.glob(os.path.join(conditioning_dir, "*"))
        for file_path in conditioning_files:
            if os.path.isfile(file_path) and delete_file(file_path):
                print(f"Deleted: {file_path}")
                deleted_count += 1
    
    # Summary
    elapsed_time = time.time() - start_time
    print(f"\nDeleted {deleted_count} files in {elapsed_time:.2f} seconds")
    
    if deleted_count == 0:
        print("No output files found to delete.")
    else:
        print("All output files have been deleted. You can now run the pipeline from the beginning.")

if __name__ == "__main__":
    main()
